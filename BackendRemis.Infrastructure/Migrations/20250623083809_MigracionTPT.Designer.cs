// <auto-generated />
using System;
using System.Collections.Generic;
using BackendRemis.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BackendRemis.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250623083809_MigracionTPT")]
    partial class MigracionTPT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BackendRemis.Domain.Entities.AgendamientoRecurrente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<int[]>("DiasPermitidos")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<List<DateTime>>("FechasExcluidas")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]");

                    b.Property<string>("Nota")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("AgendamientosRecurrentes");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Auto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Anio")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ChoferId")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DuenioAutoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaVencimientoSeguro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaVencimientoVTV")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MarcaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModeloId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumeroMovil")
                        .HasColumnType("integer");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Seguro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChoferId");

                    b.HasIndex("DuenioAutoId");

                    b.HasIndex("MarcaId");

                    b.HasIndex("ModeloId");

                    b.ToTable("Autos");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.AutoChofer", b =>
                {
                    b.Property<Guid>("AutoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChoferId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EstaHabilitado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AutoId", "ChoferId");

                    b.HasIndex("ChoferId");

                    b.ToTable("AutoChoferes");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.CodigoDireccionFrecuente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MensajeDefault")
                        .HasColumnType("text");

                    b.Property<string>("NombreReferencia")
                        .HasColumnType("text");

                    b.Property<string>("Observaciones")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CodigosDireccionFrecuente");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.CuentaCorriente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmailResponsable")
                        .HasColumnType("text");

                    b.Property<string>("NombreCuenta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumeroCuenta")
                        .HasColumnType("integer");

                    b.Property<string>("Responsable")
                        .HasColumnType("text");

                    b.Property<string>("TelefonoResponsable")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("CuentasCorriente");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.DireccionExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DireccionExtra");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Marca", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Modelo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MarcaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.ToTable("Modelos");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.PermisoOperador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("NombrePermiso")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperadorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OperadorId");

                    b.ToTable("PermisosOperador");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.RegistroDeSesion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Dispositivo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaHoraEgreso")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaHoraIngreso")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpAcceso")
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("RegistrosDeSesion");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.TelefonoExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TelefonoExtra");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CUIT_CUIL")
                        .HasColumnType("text");

                    b.Property<string>("DNI")
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NumeroDeOperador")
                        .HasColumnType("integer");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Viaje", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AgendamientoRecurrenteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AutoId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Calificacion")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ChoferId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CodigoDireccionFrecuenteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CuentaCorrienteId")
                        .HasColumnType("uuid");

                    b.Property<string>("DireccionDestino")
                        .HasColumnType("text");

                    b.Property<string>("DireccionOrigen")
                        .HasColumnType("text");

                    b.Property<string>("EntreCalle1")
                        .HasColumnType("text");

                    b.Property<string>("EntreCalle2")
                        .HasColumnType("text");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("FechaHoraAsignacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaHoraFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaHoraInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaHoraProgramada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaHoraSolicitud")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreContacto")
                        .HasColumnType("text");

                    b.Property<string>("Nota")
                        .HasColumnType("text");

                    b.Property<int?>("NumeroOperador")
                        .HasColumnType("integer");

                    b.Property<string>("ObservacionesDireccion")
                        .HasColumnType("text");

                    b.Property<int>("Origen")
                        .HasColumnType("integer");

                    b.Property<string>("TelefonoContacto")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgendamientoRecurrenteId");

                    b.HasIndex("AutoId");

                    b.HasIndex("ChoferId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CodigoDireccionFrecuenteId");

                    b.HasIndex("CuentaCorrienteId");

                    b.ToTable("Viajes");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Admin", b =>
                {
                    b.HasBaseType("BackendRemis.Domain.Entities.User");

                    b.ToTable("Admins", (string)null);
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.AdminAsignado", b =>
                {
                    b.HasBaseType("BackendRemis.Domain.Entities.User");

                    b.Property<Guid?>("AdminId")
                        .HasColumnType("uuid");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminAsignados", (string)null);
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Chofer", b =>
                {
                    b.HasBaseType("BackendRemis.Domain.Entities.User");

                    b.Property<DateTime>("FechaVencimientoLicencia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NumeroLicencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Choferes", (string)null);
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Cliente", b =>
                {
                    b.HasBaseType("BackendRemis.Domain.Entities.User");

                    b.ToTable("Clientes", (string)null);
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.DuenioAuto", b =>
                {
                    b.HasBaseType("BackendRemis.Domain.Entities.User");

                    b.ToTable("DueniosAuto", (string)null);
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Operador", b =>
                {
                    b.HasBaseType("BackendRemis.Domain.Entities.User");

                    b.Property<Guid>("AdminAsignadoId")
                        .HasColumnType("uuid");

                    b.HasIndex("AdminAsignadoId");

                    b.ToTable("Operadores", (string)null);
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.AgendamientoRecurrente", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Auto", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.Chofer", "Chofer")
                        .WithMany()
                        .HasForeignKey("ChoferId");

                    b.HasOne("BackendRemis.Domain.Entities.DuenioAuto", "DuenioAuto")
                        .WithMany("Autos")
                        .HasForeignKey("DuenioAutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendRemis.Domain.Entities.Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendRemis.Domain.Entities.Modelo", "Modelo")
                        .WithMany("Autos")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chofer");

                    b.Navigation("DuenioAuto");

                    b.Navigation("Marca");

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.AutoChofer", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.Auto", "Auto")
                        .WithMany("AutoChoferes")
                        .HasForeignKey("AutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendRemis.Domain.Entities.Chofer", "Chofer")
                        .WithMany("AutoChoferes")
                        .HasForeignKey("ChoferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auto");

                    b.Navigation("Chofer");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.CuentaCorriente", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.DireccionExtra", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.User", null)
                        .WithMany("DireccionesExtra")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Modelo", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.Marca", "Marca")
                        .WithMany("Modelos")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.PermisoOperador", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.Operador", "Operador")
                        .WithMany()
                        .HasForeignKey("OperadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operador");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.RegistroDeSesion", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.User", "Usuario")
                        .WithMany("RegistrosDeSesion")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.TelefonoExtra", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.User", null)
                        .WithMany("TelefonosExtra")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Viaje", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.AgendamientoRecurrente", null)
                        .WithMany("ViajesGenerados")
                        .HasForeignKey("AgendamientoRecurrenteId");

                    b.HasOne("BackendRemis.Domain.Entities.Auto", "Auto")
                        .WithMany()
                        .HasForeignKey("AutoId");

                    b.HasOne("BackendRemis.Domain.Entities.Chofer", "Chofer")
                        .WithMany()
                        .HasForeignKey("ChoferId");

                    b.HasOne("BackendRemis.Domain.Entities.Cliente", "Cliente")
                        .WithMany("Viajes")
                        .HasForeignKey("ClienteId");

                    b.HasOne("BackendRemis.Domain.Entities.CodigoDireccionFrecuente", "CodigoDireccionFrecuente")
                        .WithMany("ViajesAsociados")
                        .HasForeignKey("CodigoDireccionFrecuenteId");

                    b.HasOne("BackendRemis.Domain.Entities.CuentaCorriente", "CuentaCorriente")
                        .WithMany("ViajesAsociados")
                        .HasForeignKey("CuentaCorrienteId");

                    b.Navigation("Auto");

                    b.Navigation("Chofer");

                    b.Navigation("Cliente");

                    b.Navigation("CodigoDireccionFrecuente");

                    b.Navigation("CuentaCorriente");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Admin", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("BackendRemis.Domain.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.AdminAsignado", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.Admin", null)
                        .WithMany("AdminAsignados")
                        .HasForeignKey("AdminId");

                    b.HasOne("BackendRemis.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("BackendRemis.Domain.Entities.AdminAsignado", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Chofer", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("BackendRemis.Domain.Entities.Chofer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Cliente", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("BackendRemis.Domain.Entities.Cliente", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.DuenioAuto", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("BackendRemis.Domain.Entities.DuenioAuto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Operador", b =>
                {
                    b.HasOne("BackendRemis.Domain.Entities.AdminAsignado", "AdminAsignado")
                        .WithMany("Operadores")
                        .HasForeignKey("AdminAsignadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendRemis.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("BackendRemis.Domain.Entities.Operador", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdminAsignado");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.AgendamientoRecurrente", b =>
                {
                    b.Navigation("ViajesGenerados");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Auto", b =>
                {
                    b.Navigation("AutoChoferes");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.CodigoDireccionFrecuente", b =>
                {
                    b.Navigation("ViajesAsociados");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.CuentaCorriente", b =>
                {
                    b.Navigation("ViajesAsociados");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Marca", b =>
                {
                    b.Navigation("Modelos");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Modelo", b =>
                {
                    b.Navigation("Autos");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.User", b =>
                {
                    b.Navigation("DireccionesExtra");

                    b.Navigation("RegistrosDeSesion");

                    b.Navigation("TelefonosExtra");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Admin", b =>
                {
                    b.Navigation("AdminAsignados");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.AdminAsignado", b =>
                {
                    b.Navigation("Operadores");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Chofer", b =>
                {
                    b.Navigation("AutoChoferes");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("Viajes");
                });

            modelBuilder.Entity("BackendRemis.Domain.Entities.DuenioAuto", b =>
                {
                    b.Navigation("Autos");
                });
#pragma warning restore 612, 618
        }
    }
}
